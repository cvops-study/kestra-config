version: '3.8'

volumes:
    postgres-data:
        driver: local
    kestra-data:
        driver: local

services:
    postgres:
        image: postgres
        restart: unless-stopped
        volumes:
            - postgres-data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: kestra
            POSTGRES_USER: kestra
            POSTGRES_PASSWORD: k3str4
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
            interval: 30s
            timeout: 10s
            retries: 10

    kestra:
        image: kestra/kestra:develop-full
        pull_policy: if_not_present
        restart: unless-stopped
        user: "root"
        command: server standalone --worker-thread=128
        volumes:
            - kestra-data:/app/storage
            - /var/run/docker.sock:/var/run/docker.sock
            - /tmp/kestra-wd:/tmp/kestra-wd
        environment:
            KESTRA_CONFIGURATION: |
                datasources:
                  postgres:
                    url: jdbc:postgresql://postgres:5432/kestra
                    driverClassName: org.postgresql.Driver
                    username: kestra
                    password: k3str4
                kestra:
                  server:
                    basic-auth:
                      enabled: false
                      username: "mdhouib195@gmail.com"
                      password: kestra
                  repository:
                    type: postgres
                  storage:
                    type: local
                    local:
                      base-path: "/app/storage"
                  queue:
                    type: postgres
                  tasks:
                    tmp-dir:
                      path: /tmp/kestra-wd/tmp
                  url: http://localhost:8080/
            SECRET_STORAGE_CONNECTION_STRING: ''
            SECRET_STORAGE_ACCOUNT_NAME: ''
            SECRET_KESTRA_BASE_API: ''
        ports:
            - "8080:8080"
            - "8081:8081"
        depends_on:
            postgres:
                condition: service_started

    grafana:
        image: grafana/grafana-enterprise
        container_name: grafana
        ports:
            - "3000:3000"
        restart: unless-stopped

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus.yaml:/etc/prometheus/prometheus.yml # Use relative path to mount prometheus.yml
        restart: unless-stopped
